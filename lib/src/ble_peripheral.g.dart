// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// Models
class UUID {
  UUID({
    required this.value,
  });

  String value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static UUID decode(Object result) {
    result as List<Object?>;
    return UUID(
      value: result[0]! as String,
    );
  }
}

class BleDescriptor {
  BleDescriptor({
    required this.uuid,
    this.value,
    this.permissions,
  });

  UUID uuid;

  Uint8List? value;

  List<int?>? permissions;

  Object encode() {
    return <Object?>[
      uuid.encode(),
      value,
      permissions,
    ];
  }

  static BleDescriptor decode(Object result) {
    result as List<Object?>;
    return BleDescriptor(
      uuid: UUID.decode(result[0]! as List<Object?>),
      value: result[1] as Uint8List?,
      permissions: (result[2] as List<Object?>?)?.cast<int?>(),
    );
  }
}

class BleCharacteristic {
  BleCharacteristic({
    required this.uuid,
    required this.properties,
    required this.permissions,
    this.descriptors,
    this.value,
  });

  UUID uuid;

  List<int?> properties;

  List<int?> permissions;

  List<BleDescriptor?>? descriptors;

  Uint8List? value;

  Object encode() {
    return <Object?>[
      uuid.encode(),
      properties,
      permissions,
      descriptors,
      value,
    ];
  }

  static BleCharacteristic decode(Object result) {
    result as List<Object?>;
    return BleCharacteristic(
      uuid: UUID.decode(result[0]! as List<Object?>),
      properties: (result[1] as List<Object?>?)!.cast<int?>(),
      permissions: (result[2] as List<Object?>?)!.cast<int?>(),
      descriptors: (result[3] as List<Object?>?)?.cast<BleDescriptor?>(),
      value: result[4] as Uint8List?,
    );
  }
}

class BleService {
  BleService({
    required this.uuid,
    required this.primary,
    required this.characteristics,
  });

  UUID uuid;

  bool primary;

  List<BleCharacteristic?> characteristics;

  Object encode() {
    return <Object?>[
      uuid.encode(),
      primary,
      characteristics,
    ];
  }

  static BleService decode(Object result) {
    result as List<Object?>;
    return BleService(
      uuid: UUID.decode(result[0]! as List<Object?>),
      primary: result[1]! as bool,
      characteristics: (result[2] as List<Object?>?)!.cast<BleCharacteristic?>(),
    );
  }
}

class BleCentral {
  BleCentral({
    required this.uuid,
  });

  UUID uuid;

  Object encode() {
    return <Object?>[
      uuid.encode(),
    ];
  }

  static BleCentral decode(Object result) {
    result as List<Object?>;
    return BleCentral(
      uuid: UUID.decode(result[0]! as List<Object?>),
    );
  }
}

class ReadRequestResult {
  ReadRequestResult({
    required this.value,
    this.offset,
  });

  Uint8List value;

  int? offset;

  Object encode() {
    return <Object?>[
      value,
      offset,
    ];
  }

  static ReadRequestResult decode(Object result) {
    result as List<Object?>;
    return ReadRequestResult(
      value: result[0]! as Uint8List,
      offset: result[1] as int?,
    );
  }
}

class _BlePeripheralChannelCodec extends StandardMessageCodec {
  const _BlePeripheralChannelCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BleCentral) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is BleCharacteristic) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is BleDescriptor) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is BleService) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is UUID) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return BleCentral.decode(readValue(buffer)!);
      case 129: 
        return BleCharacteristic.decode(readValue(buffer)!);
      case 130: 
        return BleDescriptor.decode(readValue(buffer)!);
      case 131: 
        return BleService.decode(readValue(buffer)!);
      case 132: 
        return UUID.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Flutter -> Native
class BlePeripheralChannel {
  /// Constructor for [BlePeripheralChannel].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  BlePeripheralChannel({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _BlePeripheralChannelCodec();

  Future<void> initialize() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isAdvertising() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isAdvertising', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> isSupported() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isSupported', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> stopAdvertising() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.stopAdvertising', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addServices(List<BleService?> arg_services) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.addServices', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_services]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startAdvertising(List<UUID?> arg_services, Map<UUID?, Uint8List?> arg_serviceDatas, String arg_localName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.startAdvertising', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_services, arg_serviceDatas, arg_localName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updateCharacteristic(BleCentral arg_central, BleCharacteristic arg_characteristic, Uint8List arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.updateCharacteristic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_central, arg_characteristic, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _BleCallbackCodec extends StandardMessageCodec {
  const _BleCallbackCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BleCentral) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is BleCharacteristic) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is BleDescriptor) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is BleService) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ReadRequestResult) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is UUID) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return BleCentral.decode(readValue(buffer)!);
      case 129: 
        return BleCharacteristic.decode(readValue(buffer)!);
      case 130: 
        return BleDescriptor.decode(readValue(buffer)!);
      case 131: 
        return BleService.decode(readValue(buffer)!);
      case 132: 
        return ReadRequestResult.decode(readValue(buffer)!);
      case 133: 
        return UUID.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Native -> Flutter
abstract class BleCallback {
  static const MessageCodec<Object?> codec = _BleCallbackCodec();

  ReadRequestResult? onReadRequest(BleCharacteristic characteristic, int offset, Uint8List? value);

  void onWriteRequest(BleCharacteristic characteristic, int offset, Uint8List? value);

  void onCharacteristicSubscriptionChange(BleCentral central, BleCharacteristic characteristic, bool isSubscribed);

  void onSubscribe(BleCentral bleCentral, BleCharacteristic characteristic);

  void onUnsubscribe(BleCentral bleCentral, BleCharacteristic characteristic);

  void onAdvertisingStarted(String? error);

  void onBleStateChange(bool state);

  void onServiceAdded(BleService service, String? error);

  void onConnectionStateChange(BleCentral central, bool connected);

  void onBondStateChange(BleCentral central, int bondState);

  static void setup(BleCallback? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BleCharacteristic? arg_characteristic = (args[0] as BleCharacteristic?);
          assert(arg_characteristic != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest was null, expected non-null BleCharacteristic.');
          final int? arg_offset = (args[1] as int?);
          assert(arg_offset != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest was null, expected non-null int.');
          final Uint8List? arg_value = (args[2] as Uint8List?);
          final ReadRequestResult? output = api.onReadRequest(arg_characteristic!, arg_offset!, arg_value);
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BleCharacteristic? arg_characteristic = (args[0] as BleCharacteristic?);
          assert(arg_characteristic != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest was null, expected non-null BleCharacteristic.');
          final int? arg_offset = (args[1] as int?);
          assert(arg_offset != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest was null, expected non-null int.');
          final Uint8List? arg_value = (args[2] as Uint8List?);
          api.onWriteRequest(arg_characteristic!, arg_offset!, arg_value);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BleCentral? arg_central = (args[0] as BleCentral?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange was null, expected non-null BleCentral.');
          final BleCharacteristic? arg_characteristic = (args[1] as BleCharacteristic?);
          assert(arg_characteristic != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange was null, expected non-null BleCharacteristic.');
          final bool? arg_isSubscribed = (args[2] as bool?);
          assert(arg_isSubscribed != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange was null, expected non-null bool.');
          api.onCharacteristicSubscriptionChange(arg_central!, arg_characteristic!, arg_isSubscribed!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onSubscribe', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onSubscribe was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BleCentral? arg_bleCentral = (args[0] as BleCentral?);
          assert(arg_bleCentral != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onSubscribe was null, expected non-null BleCentral.');
          final BleCharacteristic? arg_characteristic = (args[1] as BleCharacteristic?);
          assert(arg_characteristic != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onSubscribe was null, expected non-null BleCharacteristic.');
          api.onSubscribe(arg_bleCentral!, arg_characteristic!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onUnsubscribe', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onUnsubscribe was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BleCentral? arg_bleCentral = (args[0] as BleCentral?);
          assert(arg_bleCentral != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onUnsubscribe was null, expected non-null BleCentral.');
          final BleCharacteristic? arg_characteristic = (args[1] as BleCharacteristic?);
          assert(arg_characteristic != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onUnsubscribe was null, expected non-null BleCharacteristic.');
          api.onUnsubscribe(arg_bleCentral!, arg_characteristic!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onAdvertisingStarted', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onAdvertisingStarted was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          api.onAdvertisingStarted(arg_error);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_state = (args[0] as bool?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange was null, expected non-null bool.');
          api.onBleStateChange(arg_state!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BleService? arg_service = (args[0] as BleService?);
          assert(arg_service != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded was null, expected non-null BleService.');
          final String? arg_error = (args[1] as String?);
          api.onServiceAdded(arg_service!, arg_error);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BleCentral? arg_central = (args[0] as BleCentral?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange was null, expected non-null BleCentral.');
          final bool? arg_connected = (args[1] as bool?);
          assert(arg_connected != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange was null, expected non-null bool.');
          api.onConnectionStateChange(arg_central!, arg_connected!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BleCentral? arg_central = (args[0] as BleCentral?);
          assert(arg_central != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange was null, expected non-null BleCentral.');
          final int? arg_bondState = (args[1] as int?);
          assert(arg_bondState != null,
              'Argument for dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange was null, expected non-null int.');
          api.onBondStateChange(arg_central!, arg_bondState!);
          return;
        });
      }
    }
  }
}
