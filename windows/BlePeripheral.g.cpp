// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "BlePeripheral.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace ble_peripheral {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// UUID

UUID::UUID(const std::string& value)
 : value_(value) {}

const std::string& UUID::value() const {
  return value_;
}

void UUID::set_value(std::string_view value_arg) {
  value_ = value_arg;
}


EncodableList UUID::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(value_));
  return list;
}

UUID UUID::FromEncodableList(const EncodableList& list) {
  UUID decoded(
    std::get<std::string>(list[0]));
  return decoded;
}

// BleDescriptor

BleDescriptor::BleDescriptor(const UUID& uuid)
 : uuid_(uuid) {}

BleDescriptor::BleDescriptor(
  const UUID& uuid,
  const std::vector<uint8_t>* value,
  const EncodableList* permissions)
 : uuid_(uuid),
    value_(value ? std::optional<std::vector<uint8_t>>(*value) : std::nullopt),
    permissions_(permissions ? std::optional<EncodableList>(*permissions) : std::nullopt) {}

const UUID& BleDescriptor::uuid() const {
  return uuid_;
}

void BleDescriptor::set_uuid(const UUID& value_arg) {
  uuid_ = value_arg;
}


const std::vector<uint8_t>* BleDescriptor::value() const {
  return value_ ? &(*value_) : nullptr;
}

void BleDescriptor::set_value(const std::vector<uint8_t>* value_arg) {
  value_ = value_arg ? std::optional<std::vector<uint8_t>>(*value_arg) : std::nullopt;
}

void BleDescriptor::set_value(const std::vector<uint8_t>& value_arg) {
  value_ = value_arg;
}


const EncodableList* BleDescriptor::permissions() const {
  return permissions_ ? &(*permissions_) : nullptr;
}

void BleDescriptor::set_permissions(const EncodableList* value_arg) {
  permissions_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void BleDescriptor::set_permissions(const EncodableList& value_arg) {
  permissions_ = value_arg;
}


EncodableList BleDescriptor::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(uuid_.ToEncodableList()));
  list.push_back(value_ ? EncodableValue(*value_) : EncodableValue());
  list.push_back(permissions_ ? EncodableValue(*permissions_) : EncodableValue());
  return list;
}

BleDescriptor BleDescriptor::FromEncodableList(const EncodableList& list) {
  BleDescriptor decoded(
    UUID::FromEncodableList(std::get<EncodableList>(list[0])));
  auto& encodable_value = list[1];
  if (!encodable_value.IsNull()) {
    decoded.set_value(std::get<std::vector<uint8_t>>(encodable_value));
  }
  auto& encodable_permissions = list[2];
  if (!encodable_permissions.IsNull()) {
    decoded.set_permissions(std::get<EncodableList>(encodable_permissions));
  }
  return decoded;
}

// BleCharacteristic

BleCharacteristic::BleCharacteristic(
  const UUID& uuid,
  const EncodableList& properties,
  const EncodableList& permissions)
 : uuid_(uuid),
    properties_(properties),
    permissions_(permissions) {}

BleCharacteristic::BleCharacteristic(
  const UUID& uuid,
  const EncodableList& properties,
  const EncodableList& permissions,
  const EncodableList* descriptors,
  const std::vector<uint8_t>* value)
 : uuid_(uuid),
    properties_(properties),
    permissions_(permissions),
    descriptors_(descriptors ? std::optional<EncodableList>(*descriptors) : std::nullopt),
    value_(value ? std::optional<std::vector<uint8_t>>(*value) : std::nullopt) {}

const UUID& BleCharacteristic::uuid() const {
  return uuid_;
}

void BleCharacteristic::set_uuid(const UUID& value_arg) {
  uuid_ = value_arg;
}


const EncodableList& BleCharacteristic::properties() const {
  return properties_;
}

void BleCharacteristic::set_properties(const EncodableList& value_arg) {
  properties_ = value_arg;
}


const EncodableList& BleCharacteristic::permissions() const {
  return permissions_;
}

void BleCharacteristic::set_permissions(const EncodableList& value_arg) {
  permissions_ = value_arg;
}


const EncodableList* BleCharacteristic::descriptors() const {
  return descriptors_ ? &(*descriptors_) : nullptr;
}

void BleCharacteristic::set_descriptors(const EncodableList* value_arg) {
  descriptors_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void BleCharacteristic::set_descriptors(const EncodableList& value_arg) {
  descriptors_ = value_arg;
}


const std::vector<uint8_t>* BleCharacteristic::value() const {
  return value_ ? &(*value_) : nullptr;
}

void BleCharacteristic::set_value(const std::vector<uint8_t>* value_arg) {
  value_ = value_arg ? std::optional<std::vector<uint8_t>>(*value_arg) : std::nullopt;
}

void BleCharacteristic::set_value(const std::vector<uint8_t>& value_arg) {
  value_ = value_arg;
}


EncodableList BleCharacteristic::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(uuid_.ToEncodableList()));
  list.push_back(EncodableValue(properties_));
  list.push_back(EncodableValue(permissions_));
  list.push_back(descriptors_ ? EncodableValue(*descriptors_) : EncodableValue());
  list.push_back(value_ ? EncodableValue(*value_) : EncodableValue());
  return list;
}

BleCharacteristic BleCharacteristic::FromEncodableList(const EncodableList& list) {
  BleCharacteristic decoded(
    UUID::FromEncodableList(std::get<EncodableList>(list[0])),
    std::get<EncodableList>(list[1]),
    std::get<EncodableList>(list[2]));
  auto& encodable_descriptors = list[3];
  if (!encodable_descriptors.IsNull()) {
    decoded.set_descriptors(std::get<EncodableList>(encodable_descriptors));
  }
  auto& encodable_value = list[4];
  if (!encodable_value.IsNull()) {
    decoded.set_value(std::get<std::vector<uint8_t>>(encodable_value));
  }
  return decoded;
}

// BleService

BleService::BleService(
  const UUID& uuid,
  bool primary,
  const EncodableList& characteristics)
 : uuid_(uuid),
    primary_(primary),
    characteristics_(characteristics) {}

const UUID& BleService::uuid() const {
  return uuid_;
}

void BleService::set_uuid(const UUID& value_arg) {
  uuid_ = value_arg;
}


bool BleService::primary() const {
  return primary_;
}

void BleService::set_primary(bool value_arg) {
  primary_ = value_arg;
}


const EncodableList& BleService::characteristics() const {
  return characteristics_;
}

void BleService::set_characteristics(const EncodableList& value_arg) {
  characteristics_ = value_arg;
}


EncodableList BleService::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(uuid_.ToEncodableList()));
  list.push_back(EncodableValue(primary_));
  list.push_back(EncodableValue(characteristics_));
  return list;
}

BleService BleService::FromEncodableList(const EncodableList& list) {
  BleService decoded(
    UUID::FromEncodableList(std::get<EncodableList>(list[0])),
    std::get<bool>(list[1]),
    std::get<EncodableList>(list[2]));
  return decoded;
}

// BleCentral

BleCentral::BleCentral(const UUID& uuid)
 : uuid_(uuid) {}

const UUID& BleCentral::uuid() const {
  return uuid_;
}

void BleCentral::set_uuid(const UUID& value_arg) {
  uuid_ = value_arg;
}


EncodableList BleCentral::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(uuid_.ToEncodableList()));
  return list;
}

BleCentral BleCentral::FromEncodableList(const EncodableList& list) {
  BleCentral decoded(
    UUID::FromEncodableList(std::get<EncodableList>(list[0])));
  return decoded;
}

// ReadRequestResult

ReadRequestResult::ReadRequestResult(const std::vector<uint8_t>& value)
 : value_(value) {}

ReadRequestResult::ReadRequestResult(
  const std::vector<uint8_t>& value,
  const int64_t* offset)
 : value_(value),
    offset_(offset ? std::optional<int64_t>(*offset) : std::nullopt) {}

const std::vector<uint8_t>& ReadRequestResult::value() const {
  return value_;
}

void ReadRequestResult::set_value(const std::vector<uint8_t>& value_arg) {
  value_ = value_arg;
}


const int64_t* ReadRequestResult::offset() const {
  return offset_ ? &(*offset_) : nullptr;
}

void ReadRequestResult::set_offset(const int64_t* value_arg) {
  offset_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void ReadRequestResult::set_offset(int64_t value_arg) {
  offset_ = value_arg;
}


EncodableList ReadRequestResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(value_));
  list.push_back(offset_ ? EncodableValue(*offset_) : EncodableValue());
  return list;
}

ReadRequestResult ReadRequestResult::FromEncodableList(const EncodableList& list) {
  ReadRequestResult decoded(
    std::get<std::vector<uint8_t>>(list[0]));
  auto& encodable_offset = list[1];
  if (!encodable_offset.IsNull()) {
    decoded.set_offset(encodable_offset.LongValue());
  }
  return decoded;
}


BlePeripheralChannelCodecSerializer::BlePeripheralChannelCodecSerializer() {}

EncodableValue BlePeripheralChannelCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(BleCentral::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(BleCharacteristic::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(BleDescriptor::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(BleService::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(UUID::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void BlePeripheralChannelCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(BleCentral)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<BleCentral>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(BleCharacteristic)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<BleCharacteristic>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(BleDescriptor)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<BleDescriptor>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(BleService)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<BleService>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(UUID)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<UUID>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by BlePeripheralChannel.
const flutter::StandardMessageCodec& BlePeripheralChannel::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&BlePeripheralChannelCodecSerializer::GetInstance());
}

// Sets up an instance of `BlePeripheralChannel` to handle messages through the `binary_messenger`.
void BlePeripheralChannel::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  BlePeripheralChannel* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.initialize", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->Initialize();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isAdvertising", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<bool> output = api->IsAdvertising();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.isSupported", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<bool> output = api->IsSupported();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.stopAdvertising", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->StopAdvertising();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.addServices", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_services_arg = args.at(0);
          if (encodable_services_arg.IsNull()) {
            reply(WrapError("services_arg unexpectedly null."));
            return;
          }
          const auto& services_arg = std::get<EncodableList>(encodable_services_arg);
          std::optional<FlutterError> output = api->AddServices(services_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.startAdvertising", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_services_arg = args.at(0);
          if (encodable_services_arg.IsNull()) {
            reply(WrapError("services_arg unexpectedly null."));
            return;
          }
          const auto& services_arg = std::get<EncodableList>(encodable_services_arg);
          const auto& encodable_service_datas_arg = args.at(1);
          if (encodable_service_datas_arg.IsNull()) {
            reply(WrapError("service_datas_arg unexpectedly null."));
            return;
          }
          const auto& service_datas_arg = std::get<EncodableMap>(encodable_service_datas_arg);
          const auto& encodable_local_name_arg = args.at(2);
          if (encodable_local_name_arg.IsNull()) {
            reply(WrapError("local_name_arg unexpectedly null."));
            return;
          }
          const auto& local_name_arg = std::get<std::string>(encodable_local_name_arg);
          std::optional<FlutterError> output = api->StartAdvertising(services_arg, service_datas_arg, local_name_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.ble_peripheral.BlePeripheralChannel.updateCharacteristic", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_central_arg = args.at(0);
          if (encodable_central_arg.IsNull()) {
            reply(WrapError("central_arg unexpectedly null."));
            return;
          }
          const auto& central_arg = std::any_cast<const BleCentral&>(std::get<CustomEncodableValue>(encodable_central_arg));
          const auto& encodable_characteristic_arg = args.at(1);
          if (encodable_characteristic_arg.IsNull()) {
            reply(WrapError("characteristic_arg unexpectedly null."));
            return;
          }
          const auto& characteristic_arg = std::any_cast<const BleCharacteristic&>(std::get<CustomEncodableValue>(encodable_characteristic_arg));
          const auto& encodable_value_arg = args.at(2);
          if (encodable_value_arg.IsNull()) {
            reply(WrapError("value_arg unexpectedly null."));
            return;
          }
          const auto& value_arg = std::get<std::vector<uint8_t>>(encodable_value_arg);
          std::optional<FlutterError> output = api->UpdateCharacteristic(central_arg, characteristic_arg, value_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue BlePeripheralChannel::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue BlePeripheralChannel::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}


BleCallbackCodecSerializer::BleCallbackCodecSerializer() {}

EncodableValue BleCallbackCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(BleCentral::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(BleCharacteristic::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(BleDescriptor::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(BleService::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(ReadRequestResult::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(UUID::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void BleCallbackCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(BleCentral)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<BleCentral>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(BleCharacteristic)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<BleCharacteristic>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(BleDescriptor)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<BleDescriptor>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(BleService)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<BleService>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ReadRequestResult)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<ReadRequestResult>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(UUID)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<UUID>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
BleCallback::BleCallback(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger) {}

const flutter::StandardMessageCodec& BleCallback::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&BleCallbackCodecSerializer::GetInstance());
}

void BleCallback::OnReadRequest(
  const BleCharacteristic& characteristic_arg,
  int64_t offset_arg,
  const std::vector<uint8_t>* value_arg,
  std::function<void(const ReadRequestResult*)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onReadRequest", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(characteristic_arg),
    EncodableValue(offset_arg),
    value_arg ? EncodableValue(*value_arg) : EncodableValue(),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    std::unique_ptr<EncodableValue> response = GetCodec().DecodeMessage(reply, reply_size);
    const auto& encodable_return_value = *response;
    const auto* return_value = &(std::any_cast<const ReadRequestResult&>(std::get<CustomEncodableValue>(encodable_return_value)));
    on_success(return_value);
  });
}

void BleCallback::OnWriteRequest(
  const BleCharacteristic& characteristic_arg,
  int64_t offset_arg,
  const std::vector<uint8_t>* value_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onWriteRequest", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(characteristic_arg),
    EncodableValue(offset_arg),
    value_arg ? EncodableValue(*value_arg) : EncodableValue(),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

void BleCallback::OnCharacteristicSubscriptionChange(
  const BleCentral& central_arg,
  const BleCharacteristic& characteristic_arg,
  bool is_subscribed_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onCharacteristicSubscriptionChange", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(central_arg),
    CustomEncodableValue(characteristic_arg),
    EncodableValue(is_subscribed_arg),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

void BleCallback::OnSubscribe(
  const BleCentral& ble_central_arg,
  const BleCharacteristic& characteristic_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onSubscribe", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(ble_central_arg),
    CustomEncodableValue(characteristic_arg),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

void BleCallback::OnUnsubscribe(
  const BleCentral& ble_central_arg,
  const BleCharacteristic& characteristic_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onUnsubscribe", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(ble_central_arg),
    CustomEncodableValue(characteristic_arg),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

void BleCallback::OnAdvertisingStarted(
  const std::string* error_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onAdvertisingStarted", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    error_arg ? EncodableValue(*error_arg) : EncodableValue(),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

void BleCallback::OnBleStateChange(
  bool state_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onBleStateChange", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    EncodableValue(state_arg),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

void BleCallback::OnServiceAdded(
  const BleService& service_arg,
  const std::string* error_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onServiceAdded", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(service_arg),
    error_arg ? EncodableValue(*error_arg) : EncodableValue(),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

void BleCallback::OnConnectionStateChange(
  const BleCentral& central_arg,
  bool connected_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onConnectionStateChange", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(central_arg),
    EncodableValue(connected_arg),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

void BleCallback::OnBondStateChange(
  const BleCentral& central_arg,
  int64_t bond_state_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.ble_peripheral.BleCallback.onBondStateChange", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(central_arg),
    EncodableValue(bond_state_arg),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

}  // namespace ble_peripheral
